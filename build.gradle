buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
	id 'de.fntsoftware.gradle.markdown-to-pdf' version '1.0.1'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

apply plugin: 'kotlin'
apply plugin: 'application'

import de.fntsoftware.gradle.MarkdownToPdfTask;

group 'eu.cqse'
version '1.0.4'

repositories {
    mavenCentral()
    jcenter()
    ivy {
        url "https://share.cqse.eu/svn/artifacts/ivy"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile group: "org.http4k", name: "http4k-core", version: "3.24.0"
    compile group: "org.http4k", name: "http4k-server-jetty", version: "3.24.0"
    compile group: "org.http4k", name: "http4k-client-okhttp", version: "3.24.0"
    compile group: "org.http4k", name: "http4k-multipart", version: "3.24.0"

    compile 'com.github.ajalt:clikt:1.1.0'

    compile 'org.apache.ant:ant:1.10.3'

    compile 'io.github.microutils:kotlin-logging:1.4.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.10.0'

    compile 'org.conqat:org.conqat.lib.commons:0.20160822'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

processResources {
    filesMatching('**/app.properties') {
        filter {
            it.replace('%APP_VERSION_TOKEN_REPLACED_DURING_BUILD%', version.toString())
        }
    }
}

task userguideToPdf(type: MarkdownToPdfTask) {
    inputFile = 'resources/documentation/userguide.md'
    outputFile = 'build/documentation/userguide.pdf'
}

mainClassName = 'eu/cqse/fileupload/MainKt'
shadowJar {
    baseName = 'fileupload-service'
	classifier = null
}

distributions {
	shadow {
		baseName = 'fileupload-service'
		contents {
			from(userguideToPdf) {
				into 'documentation'
			}

            from('LICENSE')

            from('resources') {
                include 'linux'
                include 'windows'
            }

            from('build/resources/main') {
                include 'log4*.xml'
            }

			filesMatching('**/VERSION.txt') {
				filter {
					it.replace('%APP_VERSION_TOKEN_REPLACED_DURING_BUILD%', version)
				}
			}
		}
	}
}

